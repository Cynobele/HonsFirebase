<resources>

    <!-- String values used in Layout files -->
    <string name="app_name">HonsFirebase</string>
    <string name="email_hint">Email Address</string>
    <string name="pass_hint">Password</string>
    <string name="new_pass_hint">Enter a new Password</string>
    <string name="conf_pass_hint">Confirm Password</string>
    <string name="login">Login</string>
    <string name="submit">Submit</string>
    <string name="forgot_pass">Forgot Password</string>
    <string name="forgot_pass_hint">If the Email is registered, a password reset link will be sent!</string>
    <string name="create_acc">Create Account</string>
    <string name="quiz_button">Quizzes</string>
    <string name="lesson_button">Lessons</string>
    <string name="logout_button">Sign Out</string>
    <string name="uad_warning">University email accounts may not be able to receive password reset links via email!</string>


    <!-- lesson $ quiz selection topics -->
    <string name="lesson_topic_1">Topic 1 - Variables and Data Types</string>
    <string name="lesson_topic_2">Topic 2 - Operators</string>
    <string name="lesson_topic_3">Topic 3 - Conditions &amp; Selection</string>
    <string name="lesson_topic_4">Topic 4 - Loops</string>
    <string name="lesson_topic_5">Topic 5 - Functions</string>
    <string name="quiz_topic_1">Quiz 1 - Variables and Data Types</string>
    <string name="quiz_topic_2">Quiz 2 - Operators</string>
    <string name="quiz_topic_3">Quiz 3 - Conditions &amp; Selection</string>
    <string name="quiz_topic_4">Quiz 4 - Loops</string>
    <string name="quiz_topic_5">Quiz 5 - Functions</string>
    <string name="quiz_topic_mixed">Mixed Topics Quiz</string>

    <string name="lorem_long">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</string>

    <string name="lorem_short">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</string>
    <string name="lorem_short2"> \u2022 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</string>



    <!-- #### VARIABLES TEXT VALUES #### -->
    <string name="vars_intro_text">\nA \'Variable\' is like a box that a computer uses to store data.
         Variables allow computers to store a single item of data, and access it later when required.\n
         \nThe word \'variable\' means \'changeable\' - data stored inside variables can be changed.
         This makes them extremely useful things that make up the building blocks of most computer programs.\n
    </string>
        <!-- \u2022 will display a round bullet point -->
    <string name="vars_3_parts">\nVariables are made up of 3 essential parts:\n
        \t \u2022 A Name (In orange)\n
        \t \u2022 A Type (In blue)\n
        \t \u2022 A Value (In green)\n
    </string>
    <string name="vars_naming">\n It is important to name variables in a meaningful way, so that
        it is clear what each variable is being used for.\n\n For example, \'int age = 21\' is an integer
        type variable that contains the age of something.\n This is easy to see thanks to the meaningful name.\n
        \u25BA \'int\' (integer) is the variable\'s type. \n
        \u25BA \'age\' is the variable\'s name. \n
        \u25BA \'21\' is the variable\'s value.
    </string>
    <string name="vars_conventions">\n Variable names should also follow a consistent style throughout
        your code, this will keep your code easy-to-read and maintain. Variables cannot use spaces in their names!
        \n\nSeveral common variable naming styles:\n</string>

    <string name="vars_arrays">\n An \'Array\' is a list of variables - these allow programmers to store many variables in a more efficient way than having a large group of variables.\n</string>
    <string name="arrays_explanation">\nLeft - week day variables / Right - An array of week days.\n Values stored inside arrays can be accessed anytime, similarly to variables.
            You should note that when accessing the array value \"Thursday\" below, array item 3 is accessed despite \"Thursday\" being the fourth value. \nThis is because arrays count by starting at zero.\n</string>
    <!-- #### END VARIABLES TEXT VALUES #### -->



    <!-- #### OPERATORS TEXT VALUES #### -->
    <string name="oper_intro">\n Operators are special symbols that allow programmers to use the values stored inside variables and arrays.</string>
    <string name="oper_types">\n There are many different kinds of operators, we will cover the most commonly used ones: \n\n
                                \t \u25BA Arithmetic operators \n
                                \t \u25BA Conditional operators \n
                                \t \u25BA Logic operators \n</string>

    <string name="arithmetic_oper_intro"> Arithmetic operators are used to perform mathematical functions, like adding two values together. These operators will return a numerical value - the answer to the maths question.\n</string>
    <string name="conditional_oper_intro"> \nConditional operators are used to compare values. These operators return a boolean value based on the comparison,
                                            for example (12 > 5) would return TRUE, since 12 is greater than 5.\n</string>

    <string name="equals_explanation">\n The \'equals\' operator appears in both the arithmetic and conditional operator sets.\n
                                    \u25BA A single symbol (=) sets one value to be equal to another.\n
                                    \u25BA A double symbol (==) compares one value to another.\n</string>
    <string name="logic_oper_intro">\nLogical operators take boolean values as input, and return another value based on the operator used.\n
                                    \u25BA AND - returns true if the values being compared are \*both\* true.\n
                                    \u25BA OR - returns true if \*either\* of the values being compared are true.\n
                                    \u25BA NOT - inverts the boolean value.\n</string>

    <string name="logic_examples">\n \u25BA (TRUE &amp;&amp; FALSE) = FALSE\n
                                \u25BA (TRUE &amp;&amp; TRUE) = TRUE\n
                                \u25BA (TRUE || FALSE) = TRUE\n
                                \u25BA (FALSE || FALSE) = FALSE\n
                                \u25BA (!FALSE) = TRUE\n</string>

    <!-- #### END OPERATORS TEXT VALUES #### -->




    <!-- #### CONDITIONS & SELECTION TEXT VALUES #### -->

    <string name="cond_intro">Certain keywords in programming allow you to control the flow of a program,
        depending on certain conditions.\n
                \u25BA IF \n
                \u25BA ELSE \n
                \u25BA SWITCH \n</string>
    <string name="cond_intro_2">These keywords let the program select which sections of code should be used, and which should be skipped - without having a person intervene.\n</string>
    <string name="flowchart_explanation">\nThe flowchart here represents a simple case of selection. \nThe diamond shape represents the \'if\' statement.
                It checks the value that is passed into it, and chooses which path to go down based on the result.\n
                \u25BA If the car has fuel, it doesn\'t need filled.\n
                \u25BA If the car is empty, it needs filled.\n</string>

    <string name="flowchart_code">The screenshot below shows the car fuel tank flowchart example as code.\n
                \u25BA The \'if\' section will check the value first.\n
                \u25BA If the result is true, the code inside here will run.\n
                \u25BA The \'else\' section will run if the result was false.\n</string>

    <string name="if_else_code">\nHere is a slightly more complex version of the car fuel tank example.\n
                There are two \'if\' sections here, these will check their conditions one at a time.\n If neither of them are true, then the \'else\' section will be used instead.\n
                \nOnce one of the sections has been used, the others will not check their conditions - the program will move on.</string>

    <string name="if_else_explanation">\u25BA The first \'if\' will run if the tank is less than a quarter full.\n
                    \u25BA The second will run instead, if the tank is less than half full, but more than a quarter full.\n
                    \u25BA The final section will run if the tank if more than half full.\n </string>

    <string name="switch_explanation">The \'switch\' statement works similarly to \'if\'.\n
            It receives an integer value and compares it to its \'case\' values. If there is a match, the matching section of code will run.\n
            \nThese are much faster than using many \'if else\' statements together - and far easier to maintain.\n</string>

    <!-- ## END CONDITIONS & SELECTION TEXT VALUES #### -->



    <!-- #### LOOPS TEXT VALUES #### -->

    <string name="loops_intro">Loops are pieces of code that will repeatedly execute until a condition is met.\n
            The keywords for loops are: \n \u25BA \'FOR\' \n \u25BA \'WHILE\'\n</string>


    <!-- #### END LOOPS TEXT VALUES #### -->
</resources>
